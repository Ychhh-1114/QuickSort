//在矩阵的输入中用 0 代替空格
#include<iostream>
#include<stack>
#include<queue>
#define st 0
using namespace std;
int path,num,X,Y,open_len,close_len,tar;
bool Find;
int path_matrix[389113][4][4];
int step[389113];
int Tar[4][4];
queue<int> open;
queue<int> close;
void init(){
	cout<<"please input initial matrix："<<endl;
	for(int i = 1;i <= 3;i++)
	for(int j = 1;j <= 3;j++)
	cin>>path_matrix[st][i][j];
	open.push(st);
	open_len = 1;num++;
	cout<<"please input target matrix: "<<endl;
	for(int i = 1;i <= 3;i++)
	for(int j = 1;j <= 3;j++)
	cin>>Tar[i][j]; 
	Find = false;
}
void space_search(int matrix[4][4]){
	for(int i = 1;i <= 3;i++)
	for(int j = 1;j <= 3;j++){
		if(matrix[i][j] == 0){
			X = i;
			Y = j;
			return;
		}
	}	
}
void copy(int copy[4][4],int copied[4][4]){
	for(int i = 1;i <= 3;i++)
	for(int j = 1;j <= 3;j++)
	copy[i][j] = copied[i][j];
}
bool compare(int matrix[4][4]){
	int flag = 0,k,j;
	for(int i = 0;i < open_len;i++)
	{
		int index = open.front();open.pop();
		if(matrix[1][1] == path_matrix[index][1][1] && matrix[1][2] == path_matrix[index][1][2] && matrix[1][3] == path_matrix[index][1][3] &&
	    matrix[2][1] == path_matrix[index][2][1] && matrix[2][2] == path_matrix[index][2][2] && matrix[2][3] == path_matrix[index][2][3] &&
	    matrix[3][1] == path_matrix[index][3][1] && matrix[3][2] == path_matrix[index][3][2] && matrix[3][3] == path_matrix[index][3][3]
	   )flag = 1;
		open.push(index);
	}
	if(flag == 1)return false;
	else{
		for(int i = 0;i < close_len;i++)
		{
			int index = close.front();close.pop();
			if(matrix[1][1] == path_matrix[index][1][1] && matrix[1][2] == path_matrix[index][1][2] && matrix[1][3] == path_matrix[index][1][3] &&
	        matrix[2][1] == path_matrix[index][2][1] && matrix[2][2] == path_matrix[index][2][2] && matrix[2][3] == path_matrix[index][2][3] &&
	        matrix[3][1] == path_matrix[index][3][1] && matrix[3][2] == path_matrix[index][3][2] && matrix[3][3] == path_matrix[index][3][3]
	        )flag = 1;
		    close.push(index);
		}
		if(flag == 1)return false;
	}
	if(matrix[1][1] == Tar[1][1] && matrix[1][2] == Tar[1][2] && matrix[1][3] == Tar[1][3] &&
	   matrix[2][1] == Tar[2][1] && matrix[2][2] == Tar[2][2] && matrix[2][3] == Tar[2][3] &&
	   matrix[3][1] == Tar[3][1] && matrix[3][2] == Tar[3][2] && matrix[3][3] == Tar[3][3]
	   )Find = true;
	return true;
}
void save(int matrix[4][4],int pre){
	int index = num++;
	for(int i = 1;i <= 3;i++)
	for(int j = 1;j <= 3;j++)
	path_matrix[index][i][j] = matrix[i][j];
	open.push(index); 
	step[index] = pre;
	if(Find)tar = index;
}
/*void show(int matrix[4][4]){
	cout<<num<<endl;
	for(int i = 1;i <= 3;i++){
		for(int j = 1;j <= 3;j++)
		cout<<matrix[i][j]<<" ";
		cout<<endl;
	}
	cout<<endl;
}*/
bool move(int matrix[4][4],int flag,int index){
	int temp[4][4];
	copy(temp,matrix);
	if(flag == 1 && X != 1){
		temp[X][Y] = temp[X - 1][Y];
		temp[X - 1][Y] = 0;
		if(compare(temp)){
			save(temp,index);
			open_len++;
		}
	}
	else if(flag == 2 && X != 3){
		temp[X][Y] = temp[X + 1][Y];
		temp[X + 1][Y] = 0;
		if(compare(temp)){
			save(temp,index);
			open_len++;
		}
	}
	else if(flag == 3 && Y != 1){
		temp[X][Y] = temp[X][Y - 1];
		temp[X][Y - 1] = 0;
		if(compare(temp)){
			save(temp,index);
			open_len++;
		}
	}
	else if(flag == 4 && Y != 3){
		temp[X][Y] = temp[X][Y + 1];
		temp[X][Y + 1] = 0;
		if(compare(temp)){
			save(temp,index);
			open_len++;
		}
	}
}
void DFS(){
	while(true){
		int index = open.front();open.pop();open_len--;
		int temp[4][4];
		for(int i = 1;i <= 3;i++)
		for(int j = 1;j <= 3;j++)
		temp[i][j] = path_matrix[index][i][j];
		space_search(temp);
		for(int i = 1;i <= 4;i++){
			move(temp,i,index);
			if(Find)return;
		}
		close.push(index);close_len++;
	}
}
void show_step(){
	stack<int> turn;
	int step_ = tar;
	while(step_ != 0){
		turn.push(step_);
		step_ = step[step_];
	}
	turn.push(st);
	cout<<"-----------------------"<<endl;
	while(!turn.empty()){
		int index = turn.top();turn.pop();
		for(int i = 1;i <= 3;i++){
		   for(int j = 1;j <= 3;j++)
		   cout<<path_matrix[index][i][j]<<" ";
		   cout<<endl;
		}cout<<endl;
	}
	cout<<"-----------------------"<<endl;
}
int main(){
	init();
	DFS();
	show_step();
	
	
	
} 
